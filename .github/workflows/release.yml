# ✨IntelliCommerce✨ Woo MCP - Release Workflow
# Made with 🧡 in Cape Town 🇿🇦
# Powered by Xstra AI✨ | Enabled by IntelliCommerce✨

name: 🚀 Release & Publish

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  # Remove automatic triggering from pushes to main
  # This will be triggered manually or via workflow_call from CI/CD

env:
  NODE_ENV: production

jobs:
  # Pre-flight checks - only run if needed
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest

    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.version.outputs.new_version }}
      release_type: ${{ steps.version.outputs.release_type }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        # Ensure dev dependencies are installed for TypeScript compilation
        npm ci

        # Verify @types/node is available
        ls -la node_modules/@types/node/ || echo "⚠️ @types/node not found"

        # Debug TypeScript configuration
        echo "TypeScript version: $(npx tsc --version)"
        echo "Node.js version: $(node --version)"

    - name: 🔒 Security validation
      run: |
        npm run security:check
        npm audit --audit-level=high

    - name: 📝 Type checking
      run: npm run typecheck

    - name: 🏗️ Build validation
      run: npm run build

    - name: 🧪 Test validation
      run: npm run test:ci

    - name: 📋 Check if release needed
      id: check
      run: |
        # Check if we should create a release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count 2>/dev/null || echo "999")

        echo "Last tag: $LAST_TAG"
        echo "Commits since tag: $COMMITS_SINCE_TAG"

        # Determine if release is needed
        if [ "$COMMITS_SINCE_TAG" -gt "0" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "✅ Release needed - $COMMITS_SINCE_TAG commits since $LAST_TAG"
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
          echo "⏭️ No release needed - no commits since $LAST_TAG"
        fi

    - name: 🎯 Determine version
      id: version
      if: steps.check.outputs.should_release == 'true'
      run: |
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"

        # Determine release type
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        else
          # Auto-determine based on commit messages
          if git log --pretty=format:"%s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | grep -qE "^(feat|✨)"; then
            RELEASE_TYPE="minor"
          elif git log --pretty=format:"%s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | grep -qE "BREAKING|breaking"; then
            RELEASE_TYPE="major"
          else
            RELEASE_TYPE="patch"
          fi
        fi

        echo "Release type: $RELEASE_TYPE"
        echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

        # Calculate new version (don't modify package.json permanently)
        case $RELEASE_TYPE in
          "major")
            NEW_VERSION=$(npm version major --no-git-tag-version --no-commit-hooks)
            ;;
          "minor")
            NEW_VERSION=$(npm version minor --no-git-tag-version --no-commit-hooks)
            ;;
          "patch")
            NEW_VERSION=$(npm version patch --no-git-tag-version --no-commit-hooks)
            ;;
        esac

        # Reset package.json (we don't want to commit this yet)
        git checkout -- package.json package-lock.json

        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  # Create GitHub Release (no commits to main - branch protection friendly)
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_release == 'true'

    outputs:
      release_id: ${{ steps.release.outputs.result }}
      upload_url: ${{ steps.release.outputs.upload_url }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 📈 Generate changelog
      run: |
        # Generate enhanced changelog for this release
        npm run changelog:generate

        # Extract release notes for this version
        NEW_VERSION="${{ needs.validate.outputs.new_version }}"
        TAG_NAME="v${NEW_VERSION#v}"

        # Create release notes
        cat > release_notes.md << EOF
        # 🚀 IntelliCommerce✨ Woo MCP v${NEW_VERSION#v}

        **Made with 🧡 in Cape Town 🇿🇦**
        **Powered by Xstra AI✨ | Enabled by IntelliCommerce✨**

        ## 📋 What's Changed

        EOF

        # Add commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")
        git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD >> release_notes.md

        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "🔗 **Full Changelog**: https://github.com/jlfguthrie/intellicommerce-woo-mcp/compare/${LAST_TAG}...v${NEW_VERSION#v}" >> release_notes.md

    - name: 🏗️ Build for release
      run: |
        # Update version in package.json for the build only (not committed)
        npm version ${{ needs.validate.outputs.new_version }} --no-git-tag-version --no-commit-hooks
        npm run build

    - name: 📦 Create release package
      run: |
        # Create tarball for release
        npm pack

        # Rename to include version
        VERSION="${{ needs.validate.outputs.new_version }}"
        mv intellicommerce-woo-mcp-*.tgz "intellicommerce-woo-mcp-${VERSION#v}.tgz"

    - name: 🚀 Create GitHub Release
      id: release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const version = '${{ needs.validate.outputs.new_version }}';
          const tagName = version.startsWith('v') ? version : `v${version}`;

          // Read release notes
          const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

          // Create the release (this creates the tag automatically)
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tagName,
            target_commitish: context.sha,
            name: `🚀 ${tagName}`,
            body: releaseNotes,
            draft: false,
            prerelease: false,
            generate_release_notes: false
          });

          console.log(`✅ Created release ${tagName} with ID ${release.data.id}`);
          return release.data.id;

    - name: 📎 Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./intellicommerce-woo-mcp-${{ needs.validate.outputs.new_version }}.tgz
        asset_name: intellicommerce-woo-mcp-${{ needs.validate.outputs.new_version }}.tgz
        asset_content_type: application/gzip

  # Publish to npm
  publish:
    name: 📦 Publish to npm
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: needs.validate.outputs.should_release == 'true' && needs.release.result == 'success'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build for publishing
      run: |
        # Update version in package.json for publishing
        npm version ${{ needs.validate.outputs.new_version }} --no-git-tag-version --no-commit-hooks
        npm run build

    - name: 🔐 Configure npm authentication
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

    - name: 📦 Publish to npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        if [ -z "$NODE_AUTH_TOKEN" ]; then
          echo "⚠️ NPM_TOKEN not available, skipping npm publish"
          exit 0
        fi

        # Publish to npm
        npm publish --access public

        echo "🎉 Published v${{ needs.validate.outputs.new_version }} to npm!"

  # Notification and cleanup
  notify:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [validate, release, publish]
    if: always() && needs.validate.outputs.should_release == 'true'

    steps:
    - name: 🎉 Release Summary
      run: |
        echo "🚀 IntelliCommerce✨ Woo MCP Release Summary"
        echo "=========================================="
        echo ""
        echo "📋 Release Details:"
        echo "   Version: ${{ needs.validate.outputs.new_version }}"
        echo "   Type: ${{ needs.validate.outputs.release_type }}"
        echo "   Commit: ${{ github.sha }}"
        echo "   Branch: ${{ github.ref_name }}"
        echo ""
        echo "✅ Status:"
        echo "   Validation: ${{ needs.validate.result }}"
        echo "   Release: ${{ needs.release.result }}"
        echo "   Publish: ${{ needs.publish.result }}"
        echo ""
        echo "🔗 Links:"
        echo "   Release: https://github.com/jlfguthrie/intellicommerce-woo-mcp/releases/tag/v${{ needs.validate.outputs.new_version }}"
        echo "   npm: https://www.npmjs.com/package/intellicommerce-woo-mcp"
        echo ""
        echo "✨ Made with 🧡 in Cape Town 🇿🇦"
        echo "Powered by Xstra AI✨ | Enabled by IntelliCommerce✨"
